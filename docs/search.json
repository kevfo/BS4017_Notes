[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BS4017: High Throughput Bioinformatics",
    "section": "",
    "text": "This is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "chapters/week1.html",
    "href": "chapters/week1.html",
    "title": "1  Introduction to Linux and the Command Line (untested)",
    "section": "",
    "text": "This week’s lecture aims to cover the following topics:\nLike the title of chapter implies, the information presented in this chapter will not be tested."
  },
  {
    "objectID": "chapters/week1.html#a-brief-introduction-to-computers",
    "href": "chapters/week1.html#a-brief-introduction-to-computers",
    "title": "1  Introduction to Linux and the Command Line (untested)",
    "section": "1.1 A Brief Introduction to Computers",
    "text": "1.1 A Brief Introduction to Computers\n\n1.1.1 Turing’s Machine\n\n\n\n\n\nIllustration of a Turing Machine\n\n\n\n\nA universal machine is a machine that can solve any sequence of problems that can be solved using a computer. An machine is called Turing complete if it can act like a Turing machine: a machine that is capable of following certain rules to solve problems in a stepwise fashion. Many of today’s programming languages are Turing-complete.\n\n\n1.1.2 Machine Language\nMachine language is the only thing that computers understand.\nThe central processing unit (i.e., CPU) is the so-called “brain” of the computer and uses bits to work. When one talks about a “64-bit: CPU, it means the groups of bits are 64 in length.\nComputers understand instructions in a language made of bits, but it’s really tough for people to read and figure out what’s going on. So, to make it easier, an operating system (i.e., OS) is necessary. This is like a middleman that helps us talk to the computer in a way we can understand better."
  },
  {
    "objectID": "chapters/week1.html#unix-os",
    "href": "chapters/week1.html#unix-os",
    "title": "1  Introduction to Linux and the Command Line (untested)",
    "section": "1.2 Unix OS",
    "text": "1.2 Unix OS\nThe Uniplexed nformation and Computer Service (i.e., Unix for short) OS - often pronounced as “eunuchs” was created at Bell Laboratories in the early 1970s to help make software.\n\n\n\n\n\nPhotograph of Ken Thompson and Dennis Ritchie\n\n\n\n\nIn 1969, it started as a bunch of instructions written in a language computers understand, and it was made by Ken Thompson. Then, between 1972 and 1974, Ken Thompson and Dennis Ritchie made a new version using a language called “C”. Back then, anyone could look at and use the code for free.\nBut in the early 1980s, the company AT&T decided to keep the code secret and started selling licenses for using Unix. It even led to different versions of Unix being made by different companies.\nInterestingly, Mac OS X, the operating system used in Mac computers, is a type of Unix too!\n\n1.2.1 Unix Philosophy\nThe design idea behind Unix programs can be summarized into three bullet points:\n\nWrite programs that are really good at doing one thing.\nWrite programs that can team up and help one another out.\nWrite programs that are good at dealing with text, because text is one way that everyone can talk to one another.\n\nThe command line is also the key to using a Linux system.\nThere are also nine “paramount precepts” as Mike Gancarz summarizes:\n\nRemember, small things are nice.\nEach program should be awesome at doing just one thing.\nBuild a simple version first to test.\nIt’s better if your stuff works on lots of different computers.\nKeep your information in plain text files.\nUse existing software to help you do more.\nUse special scripts to make things even better and work on different computers.\nDon’t trap people in your program; let them do what they want.\nMake each program a tool to help with tasks."
  },
  {
    "objectID": "chapters/week1.html#linux-os",
    "href": "chapters/week1.html#linux-os",
    "title": "1  Introduction to Linux and the Command Line (untested)",
    "section": "1.3 Linux OS",
    "text": "1.3 Linux OS\n\n“I’m doing a (free) operating system (just a hobby, won’t be big and professional like gnu) for 386(486) AT clones.”\n– Linus Torvalds, August 25th, 1991.\n\nLinux is like a free operating system that works with Unix (i.e., older systems). When Unix started costing money in the 1980s, people wanted a free option. Linux is like the core part of a computer system (i.e., the kernel), connecting the software to the hardware and different programs to each other. To make it a complete system, it’s joined with other software, and this whole package is called a distribution.\n\n1.3.1 Why Use Linux?\nIt’s trustworthy and stays steady with fewer problems. There’s hardly any viruses to worry about. It’s quick because it’s built really well. Plus, Linux is free - the software is open, which means it works well with other things and gets better quickly.\nIf you want to make your own programs, it’s easy with Linux because there are free tools and helpful information. One can also change the Linux OS code if they want to.\n\n1.3.1.1 Why Use Linux for Bioinformatics Data Analysis?\nLinux has lots of little tools made by many people that can each do a small part of the work. One can mix these tools together to create pipelines that do big tasks.\nIt’s also a fantastic platform for open-source software, which means one can use many programming languages and libraries without paying.\nBut, keep in mind that using Linux might not be as easy as some other options. one’ll have to type commands on a special line, and it only does exactly what one tells it to, not what you might want it to do automatically."
  },
  {
    "objectID": "chapters/week1.html#bash-and-the-command-line",
    "href": "chapters/week1.html#bash-and-the-command-line",
    "title": "1  Introduction to Linux and the Command Line (untested)",
    "section": "1.4 Bash and the Command Line",
    "text": "1.4 Bash and the Command Line\n\n1.4.1 What is Bash?\nWhen one uses a computer with Unix, they can talk to it through something called a terminal emulator. This is a “window” to type things.\nThe terminal helps one use a special interface called a shell, which is like a way to talk to the computer by typing commands. There are different types of shells, but “bash” is the most common. It’s been around since 1989 and is used in systems like Linux and Apple’s OS X.\n\n\n1.4.2 The Command Line\nThe command line is a place where one types in what they want the computer to do. It’s not as easy as clicking on icons like in a Graphical User Interface (i.e., GUI), but it has its benefits.\n\n\n\n\n\nCommand Line Appearance After Logging into Singapore’s National Supercomputing Center\n\n\n\n\nIt’s a bit harder for beginners because they need to learn the right words (commands), but it’s faster and lets them do more. One can write down everything they do in a text file, which can be helpful. It’s also great for working with text and making the computer do things over and over automatically.\n\n1.4.2.1 Example: Connecting to a Remote Server Using an Encrypted SSH Protocol\nSecure shell (i.e., SSH) and secure copy (i.e., SCP) are like special ways to talk to a computer securely. They were made by someone named Tatu Ylönen in 1995.\n\n\n\n\n\nDiagrammatic Explanation of How SSH Works\n\n\n\n\nImagine one is sending secret messages over an unsecure network. SSH makes a safe pathway using a special key that has a lot of numbers. This key comes in two parts: the public key, which can be shared, and the private key, which keeps things secret.\n\n\n\n1.4.3 Basic Bash Operations\n\n1.4.3.1 Fundamental Operations\nSome basic commands include:\n\nls - this lists all files and folders in the current working directory.\ncd - this changes the working directory.\ncp - this makes a copy of a file.\n\nCommands also have something called flags that modify the output. For instance, ls -la lists all files (including the hidden ones) in the current working directory in long form.\nCommands also take in arguments to complete the command - for instance, cp file1 ../folder1.\nThe man command displays helpful information about a command - for instance, man ls will list information about the ls command.\n\n\n1.4.3.2 Bash Variables\nIn bash, one can use variables like containers for information.\nFor example, one can say A=1 to put the number 1 in a variable called A. When one wants to use that number, they can add a “$” before the variable’s name, like “$A”.\n\n\n\n\n\nExamples of Assigning and Displaying the Values of Bash Variables\n\n\n\n\nTo show the value of a variable on the screen, they can use echo and write echo $A. Some variables are made by the computer, like PATH, which tells the computer where to look for programs. One can also add their own places to look by changing PATH.\n\n\n1.4.3.3 Redirects\nWhen you one runs a regular Unix command, it shows words on the screen. However, one can make those words go somewhere else too.\nFor example, if they want to list files and save the list in a file, they can write ls > listfile.txt. If they want to add more files to that list, they can write ls >> listfile.txt.\nThey can also make the words go to another command by using a pipe, like ls | grep listfile.\nYou can do this as many times as you need.\n\n\n\n1.4.4 Linux File System\nIn Unix, there aren’t “hard drives” like we usually think of them. Instead, there are directories. Think of these as special folders. ’\n\n\n\n\n\nExample of a Linux File System\n\n\n\n\nWhen one connects to a hard drive, it’s divided into pieces, and each piece is attached to a directory. So, the directory shows what’s in that piece of the hard drive.\nWhen one uses the “mount” command, it links a special part of the hard drive or even something from another computer to a directory. This way, the directory shows the stuff from that hard drive or computer.\n\n\n1.4.5 Permission Management in Linux\nIn Unix, there are three groups for who can do what with files. The first is the user who owns the file - they can keep things private.\nThen there’s a bigger group of users who can share files. Finally, there’s others, which means everyone else. There are three types of things you can do with files:\n\nread (r)\nwrite (w)\nexecute (x)\n\nThese permissions are like rules for each group saying what they can and can’t do with the files.\n\n\n1.4.6 Bash as a Turing-Complete Language\nThe bash shell isn’t just about doing things; it’s like a language for telling the computer what to do. The programs you make using the Bash language are called shell scripts. These scripts are like lists of instructions that the computer understands.\nThey’re translated and done by the computer right away, which makes Bash an “interpreted” language. Shell scripts are really good for quickly working with text and doing powerful things. For example, at NSCC, they have a system where you put your special list (script) in a line and the computer runs it when it’s ready.\n\n\n1.4.7 Useful Pointers When Using Linux\nProf. Jarkko also lists some tips when using Linux to work on tasks:\n\nYou can’t easily get back deleted files.\nSmall and capital letters matter in commands and file names.\nSome characters like #;& ” / ’ : < > | * ? $ ( ) { } [ ] and space do special things.\nIt’s safest to use only letters, numbers, _ (underscore), and . (dot) in file names.\nIf you use those special characters, put quotes around the name.\nFile names can be anything, like a mytext.txt file might not be text, but it’s good to follow conventions!"
  },
  {
    "objectID": "chapters/week1.html#how-does-programming-work",
    "href": "chapters/week1.html#how-does-programming-work",
    "title": "1  Introduction to Linux and the Command Line (untested)",
    "section": "1.5 How Does Programming Work?",
    "text": "1.5 How Does Programming Work?\n\n\n\n\n\nRelationships Between Levels of Programming Languages\n\n\n\n\nProgramming languages, like C/C++ and Visual Basic, or Python, R, and Matlab, use special tools to change the commands one writes into instructions the computer understands. These tools are like translators. Some languages use a compiler, which does the translation all at once, while others use an interpreter, which does it step by step.\n\n1.5.1 Compilers vs. Interpreters\nThere are two main ways to change one’s programming commands into computer language:\n\nCompiler:\nIt takes your list of commands (code) and changes it all into computer language at once. This gives one a file that they can run as a program. One can use it from the command line or through a nice interface.\nInterpreter:\nIt changes your commands into computer language one by one as they use them. They can give commands directly or run a list of them from a file called a script. This is like a set of instructions in a text file.\n\n\n\n1.5.2 Low versus High Level Languages\nLow-level programming languages are like really simple tools for computers. They only know how to do basic things, and they’re kind of like talking to the computer in its own language. They can work directly with memory and other computer parts. This makes them run really fast, but when one wants to do complex things, they have to write a lot of instructions, and it can be hard to find mistakes in their code.\nHigh-level programming languages are like using simpler words for computers. They’re farther away from the computer’s language, so they’re easier for people to understand. They work kind of like how humans talk, and they’re good for organizing things like objects. When one uses them, they can write less code because they can do complicated stuff in a simpler way. That’s why many people like using them for most things they create on computers."
  },
  {
    "objectID": "chapters/week2.html",
    "href": "chapters/week2.html",
    "title": "2  Genomic Sequencing and Databases",
    "section": "",
    "text": "Modern day genomic sequencing began with Sanger sequencing.\nSanger sequencing, created in 1977, is a method used to read the genetic code of living things. It’s like reading a very long sentence written in a language that cells use. This method can read up to 800 to 1000 ‘letters’ of this genetic sentence in one go. Think of it as reading a paragraph with 800 to 1000 words! And now, modern versions of this method can read 96 paragraphs all at once, making it faster and more efficient.\nStarting from 2004, progress in this field has been really fast. The first machinery that were used before that have become old-fashioned and aren’t used as much anymore."
  },
  {
    "objectID": "chapters/week2.html#sequencing-fundamentals",
    "href": "chapters/week2.html#sequencing-fundamentals",
    "title": "2  Genomic Sequencing and Databases",
    "section": "2.1 Sequencing Fundamentals",
    "text": "2.1 Sequencing Fundamentals\nThere are a few special words we need to know\n\nDepth\nThis is like how many times we read the same sentence in the book to be really sure we got it right.\nCoverage\nThis is like the average number of times we read different sentences in a part of the book.\nRead length\nThis is just how much of the book we can read at once. It’s like reading a long or short paragraph.\n\nWhen we’re reading this book, we want to make sure we cover every part equally, like giving the same attention to every page. This is called uniform coverage.\nThere are two main ways to read the book:\n\nOne way reads a lot of sentences quickly, but not all of them in detail.\nThe other way reads fewer sentences, but really understands them well.\n\nSo, you can choose to read a lot of the book or read less but really understand it deeply."
  },
  {
    "objectID": "chapters/week2.html#illumina-hiseq-and-novaseq",
    "href": "chapters/week2.html#illumina-hiseq-and-novaseq",
    "title": "2  Genomic Sequencing and Databases",
    "section": "2.2 Illumina HiSeq and NovaSeq",
    "text": "2.2 Illumina HiSeq and NovaSeq\n\n\n\n\n\nIllumina RNA Sequencing Machine Models\n\n\n\n\nCreating Illumina libraries is like preparing a special recipe for reading DNA.\nFirst, a long DNA strand and break it into smaller pieces. Then, the ends of these pieces are fixed to make them neat and ready. A special tail is then added to one end, like putting a ribbon on a gift.\nAfter that, tiny adapters, like bookends, are attached to both ends of the DNA pieces. This helps scientists to read them later. Only the right-sized pieces are desired, so any pieces that are too big or too small are removed.\nScientists make many copies of these DNA pieces so we have enough to read. Finally, they use a special machine to read the DNA letters one by one, just like flipping through the pages of a book really fast. This helps scientists learn about the DNA’s secrets and how it works!\n\n2.2.1 Typical Illumina Read Structure\n\n\n\n\n\nIllumina RNA Read Structures\n\n\n\n\nA usual Illumina read has the following structure:\n\nIllumina Forward\nImagine starting an exciting adventure book. The “Illumina Forward” is like the first page of the book, where the story begins. It’s the beginning point of our DNA reading journey.\nForward Target Primer\nThink of this like a special bookmark in the adventure book. It’s a tiny piece that helps find the exact spot to start reading about in the DNA. It’s like telling the story, “Hey, start reading right here!”\nTarget\nPicture this as a hidden treasure in the adventure story. The “target” is the part of the DNA that scientists really want to learn about. It’s like the exciting part of the story that holds a secret they’re curious about.\nReverse Target Primer\nJust like the “Forward Target Primer” helps scientists find the beginning, this is like another bookmark that helps scientists find the end of the part we’re interested in. It’s like saying, “Okay, stop reading here!”\nIllumina Reverse\nThis is like reaching the last page of a book. The Illumina Reverse marks the end of our reading journey for this section of DNA, letting scientists know that we’ve completed the sequence.\n\n\n\n2.2.2 Single End, Paired End, and Mate-Pairs\n\n\n\n\n\nExample of Mate Pair Construction to Construct a Full Genome\n\n\n\n\nIllumina is a method for reading DNA that’s like solving different puzzles. Imagine having pieces of a jigsaw puzzle.\nFirst, the scientist can look at just one side of each piece to see what’s there (i.e., single end). Or they can look at both sides of the pieces, but not the part in the middle (i.e., paired end). There’s also a special kind where they link bigger puzzle pieces together (i.e., mate-pair) to understand them better.\nIn the end, no matter which puzzle they choose, they get to read both sides and find out the average distance between them. These days, the most popular puzzle is the paired end, while the mate-pair puzzle is not used much.\nAlso, the smaller the puzzle piece, the harder it is to figure out where it fits in the bigger picture of the DNA. But having two sets of puzzle pieces helps scientists figure out where they go in the DNA picture more accurately.\n\n\n2.2.3 Barcoding\n\n\n\n\n\nExample of How a Barcode Can be Used\n\n\n\n\nIllumina sequencing can use something called **barcodes*&, which are like special tags added to each sequence. Think of them like labels on different books.\nImagine a library of books where and each book has a unique label. In the same way, the sequences get their own labels. If the labels are longer, it’s like having more specific tags for each book. This means you can put even more sequences together for reading, like having a huge shelf of books with similar tags.\nFor instance, a technology called 10x Genomics uses these longer labels to group sequences together, especially when looking at individual cells.\n\n\n2.2.4 FASTQ Formats\nIllumina returns data in a special text format called FASTQ. Imagine it’s like a recipe card for reading DNA. This card has four parts for each piece of DNA it reads:\n\nThe first part is like a name tag. It tells us which piece of DNA we’re looking at. Imagine it’s like a label on a box that says what’s inside.\nThe second part is the actual DNA sequence, like a secret code of letters (A, T, C, G, N). It’s like a coded message that we need to decode.\nThe third part is a repeat of the name tag. It’s like someone saying, “Hey, this is still the same box we talked about earlier.”\nThe fourth part is a set of quality codes. This helps us know how sure we are about each letter in the DNA sequence. It’s like having a confidence score for each letter.\n\nAnd these quality codes are kind of like a secret code too, but they’re similar to something called Phred. It’s like a scale that tells us how reliable each letter is in the DNA code, just like how we might trust different people’s opinions more or less.\n\n2.2.4.1 Phred Quality Scores\n\n\n\n\n\nPhred Score Meanings\n\n\n\n\nThe quality \\(Q\\) is calculated using the following formula:\n\\[\\begin{equation}\n  Q = -10\\log_{10}P\n\\end{equation}\\]\nThough, the scores are reported in something called ASCII to save space."
  },
  {
    "objectID": "chapters/week2.html#pacbio-sequencing",
    "href": "chapters/week2.html#pacbio-sequencing",
    "title": "2  Genomic Sequencing and Databases",
    "section": "2.3 PacBio Sequencing",
    "text": "2.3 PacBio Sequencing\nPacBio sequencing is a way to read DNA that’s like watching a movie frame by frame.\n\n\n\n\n\nHow PacBio Sequencing Works\n\n\n\n\nImagine a movie reel, but instead of film frames, there are DNA pieces. First, a special machine copies the DNA, making many identical pieces. These pieces are attached to a surface, like putting stickers on a wall.\nThen, a tiny camera watches as a machine adds one letter at a time to the DNA chain. It’s like watching someone write a story, but in DNA language. The machine records this process, and scientists can use it to figure out the DNA’s secrets. This method is special because it can read long pieces of DNA in one go, like reading long sentences without stopping.\n\n\n\n\n\nPacBio Sequencing Components\n\n\n\n\nPacBio sequencing works a bit like making a detailed copy of a story. The scientists start with a special DNA template called an SMRTbell. Imagine this template as the outline of the story. They put it on a surface and use a special machine to make copies of it. These copies are like drafts of the story. Then, a tiny helper called a “polymerase” comes in and reads the story, one letter at a time. It’s like reading the book aloud to remember every detail.\nBut here’s the cool part: the machine doesn’t just read the story once. It goes over it several times, each time reading a bit more. These shorter readings are called subreads. Think of them as reading a book chapter by chapter.\nNow, after all these readings, the scientists put everything together like a puzzle. It’s like taking all those drafts and arranging them to get the complete story. This final version is called a Circular Consensus Sequence, which is like having the perfect version of the story after making sure all the words are correct. This method helps us read long pieces of DNA with a high level of accuracy, just like getting the full story right.\n\n2.3.1 PacBio Read Formats\nWhen PacBio finishes reading DNA, it’s like recording a video of the process. This video is saved as a “.mov” file, kind of like how you save a video on your phone. But to understand the DNA story better, scientists need to do more things. They use special software called “SMRT Tools,” which PacBio made and shared with everyone. With this software, they can do different tasks, like taking off the starting and ending parts of the video (SMRT bell adapters), and pulling out the most important parts, which are like key scenes in the movie (Circular Consensus Reads / Subreads).\nOnce they’ve done all this, they can change the video into a different format, like turning a video into pictures or text. They do this to make it easier to work with. They can turn the video into a “.bam” file, which is like a fancy organizer for the pictures, or a “.fastq” file, which is like turning the video into words. All of this helps scientists understand DNA better and find out its secrets. You can learn more about this software and how it works on the PacBio website.\n\n\n2.3.2 HiFi Reads\n\n\n\n\n\nHow HiFi Sequencing Works\n\n\n\n\nThe newest thing from PacBio is called HiFi sequencing. It’s like reading a really long story in a special way. Imagine having a super-long book with chapters that are 20 pages long.\nHiFi sequencing reads these chapters many times and figures out the best version. It’s like asking different people to read the same chapter and then picking the one that’s most accurate. This helps us understand long sections of DNA really well."
  },
  {
    "objectID": "chapters/week2.html#oxford-nanopore",
    "href": "chapters/week2.html#oxford-nanopore",
    "title": "2  Genomic Sequencing and Databases",
    "section": "2.4 Oxford Nanopore",
    "text": "2.4 Oxford Nanopore\n\n\n\n\n\nHow Oxford Nanopore Sequencing Works\n\n\n\n\nOxford Nanopore technology is a different way to read DNA. Instead of taking pictures, it watches electric signals over time. Think of it like watching a graph that goes up and down. This graph is called a squiggle.\nThey save this squiggle in a special file format called fast5. This file not only keeps the squiggle but also the letters that the computer guessed from the squiggle. It’s like writing down both what the graph looks like and what the scientist thinks it means. With new software they’re making, they can even go back to the squiggle and try to guess the letters again to make sure they got them right. It’s like looking at the graph again and trying to understand it even better.\n\n2.4.1 Uses for Long DNA Reads\nUsing Oxford Nanopore technology for DNA reading has different strengths depending on how many times the DNA is read.\nWhen they read it a few times (i.e., low coverage), it’s like filling in the missing pieces of a jigsaw puzzle or adding more information to an already started story. They can use these extra details to make an existing puzzle more complete (gap-filling), make a short story longer and clearer (scaffolding a short read assembly), or combine different pieces from different puzzles into one big picture (hybrid assembly).\nBut when they read the DNA many, many times (high coverage), it’s like writing a whole new story from scratch. They don’t need any other clues because they have everything they need. This is called “De novo assembly,” where they put together a complete picture of the DNA just by using these long reads. It’s like creating a new jigsaw puzzle using only the pieces from one box."
  },
  {
    "objectID": "chapters/week2.html#ion-torrent",
    "href": "chapters/week2.html#ion-torrent",
    "title": "2  Genomic Sequencing and Databases",
    "section": "2.5 Ion Torrent",
    "text": "2.5 Ion Torrent\n\n\n\n\n\nA Graph Obtained from an Ion Torrent Machine\n\n\n\n\nIon Torrent sequencing is like a special tool that’s great for certain types of projects. When scientists need to read pieces of DNA that are a bit longer (around 400-600 letters), Ion Torrent is like a superhero.\nImagine reading a longer chapter of a book instead of just a few sentences. This is really helpful for projects like studying tiny living things called microbes that live in different places, like our bodies or the environment. These projects, called microbiome studies, benefit a lot from Ion Torrent because it helps scientists understand these tiny creatures in more detail."
  },
  {
    "objectID": "chapters/week2.html#bgiseq-and-mgiseq",
    "href": "chapters/week2.html#bgiseq-and-mgiseq",
    "title": "2  Genomic Sequencing and Databases",
    "section": "2.6 BGISEQ and MGISEQ",
    "text": "2.6 BGISEQ and MGISEQ\n\n\n\n\n\nNanoballs in BGISEQ and MGISEQ\n\n\n\n\nBGI, a genomics institute, created special machines for reading DNA. One of them is called BGISEQ-500, kind of like an older model. It reads two lines of DNA that are 100 letters long each, making a total of around 520 million letters. Then there’s a newer model, MGISEQ-2000. It can read two lines that are 200 letters each, for a total of about 1 trillion letters! These machines were made to compete with another popular DNA reader, Illumina. They were designed to be really affordable, making DNA reading cheaper for everyone. It’s like offering a lower-cost way to explore the secrets of genetics."
  },
  {
    "objectID": "chapters/week2.html#hi-c-chip-seq-10x-and-bisulfite-sequencing",
    "href": "chapters/week2.html#hi-c-chip-seq-10x-and-bisulfite-sequencing",
    "title": "2  Genomic Sequencing and Databases",
    "section": "2.7 Hi-C, ChiP-seq, 10x, and Bisulfite Sequencing",
    "text": "2.7 Hi-C, ChiP-seq, 10x, and Bisulfite Sequencing\nThere are various ways to investigate specific things about DNA, like its unique features. The main difference comes in how the DNA is prepared in the lab, but the actual reading part uses a common Illumina platform. Think of it like different ways to prepare a special dish using the same cooking equipment. No matter which method is used, they all provide a type of output file called “fastq,” which is like a document containing DNA information. However, the way this information is used can vary depending on the specific method employed.\n\n2.7.1 Hi-C\n\n\n\n\n\nHow Hi-C Sequencing Works\n\n\n\n\nHi-C sequencing is a technique that helps scientists understand how different parts of DNA are arranged in space. It’s like making a map of how different rooms in a house are connected.\n\n\n\n\n\nHi-C Data\n\n\n\n\nThey capture this information by studying how different parts of the DNA are close to each other. This technique gives them a picture of how far apart or near different parts of the DNA are along the entire chromosome. It’s like learning about the layout of a house by seeing which rooms are close to each other.\n\n\n2.7.2 10x Genomics\n\n\n\n\n\nHow 10x Genomics Works\n\n\n\n\nIn 10x Genomics technology, each individual piece of DNA is given a special code, like a secret badge. Think of it like giving every player in a game their own unique mark. This mark is created using tiny gel beads in a special mixture. It’s as if each player gets a distinct symbol, helping scientists keep track of different pieces of DNA while they’re doing their research.\n\n2.7.2.1 In Unicellular RNA Sequencing\n\n\n\n\n\n10x Genomics for RNA Sequencing\n\n\n\n\nWhen using 10x Genomics for single-cell RNA sequencing, there’s a twist in how it works. Instead of using big pieces of DNA, they focus on individual cells. Imagine each cell is like a small character in a story. They put one cell into each tiny gel bead, kind of like each character in their own small bubble. Inside these bubbles, the cell’s RNA, which is like its story, is turned into a special type of DNA called cDNA. This process is like translating the cell’s story into a new language. This way, scientists can study the stories of many individual cells all at once, and see how they’re different or similar.\n\n\n\n2.7.3 Bisulfite Sequencing\n\n\n\n\n\nHow Bisulfite Sequencing Works\n\n\n\n\nIn bisulfite sequencing, DNA is treated with a special chemical called bisulfite. This chemical changes some parts of the DNA. Imagine it’s like using a magic potion on a drawing. When applied to the DNA, bisulfite changes cytosine to uracil, but it doesn’t affect 5-methylcytosine. It’s like turning some parts of the drawing into a new color while leaving other parts the same. This helps scientists understand which parts of the DNA have certain molecules attached to them.\n\n\n2.7.4 Chromatin Immunoprecipitation\n\n\n\n\n\nHow ChIP Works\n\n\n\n\nChromatin immunoprecipitation (i.e., ChIP) is a method used to study how proteins interact with DNA. Think of it as a way to find out which proteins are hanging out with specific parts of DNA. Here’s how it works:\n\nFirst, scientists fix the proteins they’re interested in, like transcription factors, to the DNA using a special chemical called formaldehyde. Imagine it’s like gluing the proteins to certain parts of the DNA.\nThen they carefully take out the DNA and break it into smaller pieces, like breaking a long necklace into smaller beads.\nNext, they use special antibodies that act like magnets to pull out the proteins they’re studying. It’s like using a magnet to pick up certain toys from a pile.\nAfter that, they heat everything up to undo the gluing caused by formaldehyde. This step is like melting the glue and separating the proteins from the DNA.\n\nAs a result, they end up with DNA fragments that were connected to the proteins they were interested in. It’s like getting clues about which proteins were spending time with specific parts of the DNA. This helps scientists understand how different proteins control and interact with genes and DNA."
  },
  {
    "objectID": "chapters/week2.html#online-data-repositories-for-sequenced-data",
    "href": "chapters/week2.html#online-data-repositories-for-sequenced-data",
    "title": "2  Genomic Sequencing and Databases",
    "section": "2.8 Online Data Repositories for Sequenced Data",
    "text": "2.8 Online Data Repositories for Sequenced Data\n\n2.8.1 Sequence Read Archive (i.e., SRA)\nThe Sequence Read Archive (i.e., SRA) is like a big library where scientists from around the world store their DNA and RNA sequencing data. It’s kind of like a safe place for important information. This repository is taken care of by a group called NIH, in the USA.\nInside the SRA, you’ll find the raw data from sequencing, which is like the original puzzle pieces of DNA or RNA. Think of it as the untouched information from which scientists make discoveries. Both DNA and RNA data are kept here, like storing books of different kinds in the same library.\nMany scientific journals require researchers to share their sequencing data in the SRA. This is important because it allows other scientists to check their work and try things out for themselves. It’s like sharing a recipe so others can cook the same dish. Anyone can download this data for free, helping scientists all over the world learn from each other. However, more detailed information like complete genomes and detailed explanations are stored somewhere else. Sometimes scientists need to process the raw data a bit more to make sense of it, like cooking the raw ingredients into a delicious meal.\n\n\n2.8.2 NCBI Genomes\n\n\n\n\n\nNCBI Genomes\n\n\n\n\nThe NCBI Genomes database is like a huge book that holds a lot of important details about different species. It not only tells you what species a living thing belongs to, but it also lets you know if its DNA has been fully read and studied.\nInside this database, you’ll find information about the species’ classification, kind of like its scientific family tree. It’s like knowing which branch of the animal kingdom it belongs to. Additionally, you can find out if the species’ DNA has been completely read and studied in-depth.\nHowever, this database usually contains only the main or reference version of the species’ DNA, and it comes with annotations that tell you where different genes are located. These annotations are stored in a special kind of file called a “.gff” file, which is like a map showing where different treasures (genes) are hidden in the DNA. So, this database is like a treasure trove of genetic information about different species, helping scientists and researchers understand their DNA better.\n\n\n2.8.3 EBI: Ensembl Project\n\n\n\n\n\nEnsembl Project Homepage\n\n\n\n\nThe EBI’s Ensembl Project is like a special tool that helps scientists explore and understand the DNA of different living things. It’s kind of like a map for navigating the genetic information of various species.\nThis project offers a genome browser that allows researchers to access annotated genomes of species that belong to specific groups in the animal kingdom. There are different sections, like Ensemble Bacteria, Protists, Fungi, Plants, Metazoa, and Vertebrates. It’s like having different shelves in a library for different types of books.\nFor each species in Ensembl, you’ll find at least the main version of its DNA and information about its genes. Think of it as knowing the basic story of each species. But sometimes, there’s even more information available, like extra chapters in a book. This project is a helpful tool for scientists to study and learn more about the genetics of various living things."
  }
]